// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

// NOTE: generate some of the testdata file. Many others are generated by the script:
// https://github.com/microsoft/health-cards/blob/generate-test-files/generate-examples/src/index.ts

import fs from 'fs';
import path from 'path';
import jose from 'node-jose';
import { parseJson } from './utils';

interface KeyGenerationArgs {
    kty: string;
    size?: string | number;
    props?: { alg: string, crv?: string, use: string, kid?: string }
}
const outdir = 'testdata';

async function generateAndStoreKey(outFileName: string, keyGenArgs: KeyGenerationArgs, count = 1, isPrivate = false, omit = ''): Promise<void> {
    const outFilePath = path.join(outdir, outFileName);
    if (!fs.existsSync(outFilePath)) {
        console.log("Generating " + outFilePath);
        const keystore = jose.JWK.createKeyStore();
        for (let i = 0; i < count; i++) {
            await keystore.generate(keyGenArgs.kty, keyGenArgs.size, keyGenArgs.props);
        }
        const jwkSet = keystore.toJSON(isPrivate);
        if (omit) {
            // TODO: delete this property
        }
        fs.writeFileSync(outFilePath, JSON.stringify(jwkSet));
    }
}

void generateAndStoreKey('valid_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig' } });
void generateAndStoreKey('private_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig' }}, 1, true);
void generateAndStoreKey('valid_keys.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig' } }, 3);
void generateAndStoreKey('wrong_kid_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'sig', kid: 'ThisIsNotTheThumbprintOfTheKey' } });
void generateAndStoreKey('wrong_curve_key.json', { kty: 'EC', size: 'P-384', props: { alg: 'ES256', crv: 'P-384', use: 'sig' } });
void generateAndStoreKey('wrong_use_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256', crv: 'P-256', use: 'enc' } });
void generateAndStoreKey('wrong_alg_key.json', { kty: 'EC', size: 'P-256', props: { alg: 'ES256K', crv: 'P-256', use: 'sig' } });
void generateAndStoreKey('wrong_kty_key.json', { kty: 'RSA', size: 2048 });

function generateMultiVCHealthCardFile(outFileName: string, inFileNames: string[]) {
    const outFilePath = path.join(outdir, outFileName);
    if (!fs.existsSync(outFilePath)) {
        console.log("Generating " + outFilePath);
        const hc: HealthCard = {verifiableCredential: []}
        hc.verifiableCredential = inFileNames.map(file => {
            const hc = parseJson<HealthCard>(fs.readFileSync(path.join(outdir, file)).toString('utf-8'));
            if (hc) {
                return hc.verifiableCredential;
            } else {
                return [];
            }
        }).reduce( (a,c) => a?.concat(c), []);
        fs.writeFileSync(outFilePath, JSON.stringify(hc));
    }
}

generateMultiVCHealthCardFile('test-example-00-e-file-multi-jws.smart-health-card', ['example-00-e-file.smart-health-card', 'example-01-e-file.smart-health-card']);